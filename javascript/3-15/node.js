var assert = require('assert');
var test = require('../2-19/scripts/main');
var matrix1 = [[1, 3], [2, 4]];
var matrix2 = [[5, 2], [1, 0]];
var resultAddMatrix = [[6, 5],[3, 4]];
var matrix3 = [[1, 4], [2, 5], [3, 6]];
var matrix4 = [[1, 3, 5, 7], [2, 4, 6, 8]];
var resultMultiplyMatrix = [[9, 19, 29, 39], [12, 26, 40, 54], [15, 33, 51, 69]];

assert.deepEqual(test.printNumbers(1,10),[1,2,3,4,5,6,7,8,9,10],'printNumbers should return array of nums from first number to second number, inclusive');
assert.deepEqual(test.printSquare(5),[1,2,3,4,5].map(x => '* '.repeat(5)),'printSquare should return array of given length of * strings of given length');
assert.deepEqual(test.printBox(5),['* * * * * ','*       * ','*       * ','*       * ','* * * * * '],'printBox should return array of given length of * strings of given length with "*   *" strings of given length');
assert.deepEqual(test.printBanner('hi'),['******','* hi *','******'],'printBanner should return array of strings containing given message surrounded by *');
assert.deepEqual(test.factor(5),[1,5],'factor should return array of factors of given number: 5 -> [1,5]');
assert.deepEqual(test.factor(10),[1,2,5,10],'factor should return array of factors of given number: 10 -> [1,2,5,10]');
assert(test.cipher('hello',3) === 'ebiil', 'cipher when given positive number should return string left-shifted by number');
assert(test.cipher('ebiil',-3) === 'hello', 'cipher when given negative number should return string right-shifted by given number');
assert(test.leetspeak('hello') === 'H3110', 'leetspeak should return uppercase string with A,E,G,L,O,S,T replaced by numbers: hello -> H3110');
assert(test.longLongVowels('moon') === 'mooooon', 'longLongVowerls should return string with given string containing "oo" doubled in length: moon -> mooooon');
assert(test.longLongVowels('geese') === 'geeeeese', 'longLongVowerls should return string with given string containing "ee" doubled in length: geese -> geeeeese');
assert(test.longLongVowels('man') === 'man', 'longLongVowels should return same as given string when it contains no double-vowels');
assert(test.sumNumbers([1]) === 1, 'sumNumbers given a list of 1 number should return that number');
assert(test.sumNumbers([1,2,3]) === 6, 'sumNumbers given a list of numbers should return the sum of those numbers: [1,2,3] -> 6');
assert.deepEqual(test.positiveNumbers([-1,-2,-3]),[],'positiveNumbers given an array of only negative numbers should return empty array');
assert.deepEqual(test.positiveNumbers([2,4,6]),[2,4,6],'positiveNumbers given an array of only positive numbers should return identical array');
assert.deepEqual(test.positiveNumbers([-1,2,-3,4]),[2,4],'positiveNumbers given an array of mixed negative and positive numbers should return array of only those positive numbers');
assert.deepEqual(test.matrixAdd([[1,1],[1,1]],[[1,1],[1,1]]), [[2,2],[2,2]], "matrixAdd given two '1' matrices should return a '2' matrix.");
assert.deepEqual(test.matrixAdd(matrix1,matrix2),resultAddMatrix,'matrixAdd should return matrix of sum of two given matrices indices');
assert.deepEqual(test.matrixMultiply(matrix1,matrix2),[[8,2],[14,4]],'matrixMultiply should return an array of... what happens when you multiply an array. It failed this time.');
assert.deepEqual(test.matrixMultiply(matrix3,matrix4),resultMultiplyMatrix,'matrixMultiply should return a result if 1st matrix element length equals 2nd matrix length');
assert(test.matrixMultiply([[1,2,3],[4,5,6]],[[1,2,3,4],[5,6,7,8]]) === 'ERROR: matrices cannot be multiplied.','matrixMultiply should return ERROR string if matrices cannot be multiplied (mismatched length/element length)');
assert(test.rockPaperScissors('rock','scissors') === 'player 1 wins!','rockPaperScissors should return player 1 victory if first argument beats second argument (rock > paper)');
assert(test.rockPaperScissors('paper','scissors') === 'player 2 wins!','rockPaperScissors should return player 2 victory if first argument loses to second argument (paper < scissors)');
assert(test.rockPaperScissors('rock','rock') === 'player 1 and player 2 tied.','rockPaperScissors should return a tie if both arguments are the same');
